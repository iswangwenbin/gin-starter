// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: install_event.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InstallEventService_CreateInstallEvent_FullMethodName      = "/protobuf.InstallEventService/CreateInstallEvent"
	InstallEventService_CreateInstallEventBatch_FullMethodName = "/protobuf.InstallEventService/CreateInstallEventBatch"
)

// InstallEventServiceClient is the client API for InstallEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 安装事件服务
type InstallEventServiceClient interface {
	// 创建单个安装事件
	CreateInstallEvent(ctx context.Context, in *CreateInstallEventRequest, opts ...grpc.CallOption) (*CreateInstallEventResponse, error)
	// 批量创建安装事件
	CreateInstallEventBatch(ctx context.Context, in *CreateInstallEventBatchRequest, opts ...grpc.CallOption) (*CreateInstallEventBatchResponse, error)
}

type installEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstallEventServiceClient(cc grpc.ClientConnInterface) InstallEventServiceClient {
	return &installEventServiceClient{cc}
}

func (c *installEventServiceClient) CreateInstallEvent(ctx context.Context, in *CreateInstallEventRequest, opts ...grpc.CallOption) (*CreateInstallEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInstallEventResponse)
	err := c.cc.Invoke(ctx, InstallEventService_CreateInstallEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installEventServiceClient) CreateInstallEventBatch(ctx context.Context, in *CreateInstallEventBatchRequest, opts ...grpc.CallOption) (*CreateInstallEventBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInstallEventBatchResponse)
	err := c.cc.Invoke(ctx, InstallEventService_CreateInstallEventBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstallEventServiceServer is the server API for InstallEventService service.
// All implementations must embed UnimplementedInstallEventServiceServer
// for forward compatibility.
//
// 安装事件服务
type InstallEventServiceServer interface {
	// 创建单个安装事件
	CreateInstallEvent(context.Context, *CreateInstallEventRequest) (*CreateInstallEventResponse, error)
	// 批量创建安装事件
	CreateInstallEventBatch(context.Context, *CreateInstallEventBatchRequest) (*CreateInstallEventBatchResponse, error)
	mustEmbedUnimplementedInstallEventServiceServer()
}

// UnimplementedInstallEventServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInstallEventServiceServer struct{}

func (UnimplementedInstallEventServiceServer) CreateInstallEvent(context.Context, *CreateInstallEventRequest) (*CreateInstallEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstallEvent not implemented")
}
func (UnimplementedInstallEventServiceServer) CreateInstallEventBatch(context.Context, *CreateInstallEventBatchRequest) (*CreateInstallEventBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstallEventBatch not implemented")
}
func (UnimplementedInstallEventServiceServer) mustEmbedUnimplementedInstallEventServiceServer() {}
func (UnimplementedInstallEventServiceServer) testEmbeddedByValue()                             {}

// UnsafeInstallEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstallEventServiceServer will
// result in compilation errors.
type UnsafeInstallEventServiceServer interface {
	mustEmbedUnimplementedInstallEventServiceServer()
}

func RegisterInstallEventServiceServer(s grpc.ServiceRegistrar, srv InstallEventServiceServer) {
	// If the following call pancis, it indicates UnimplementedInstallEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InstallEventService_ServiceDesc, srv)
}

func _InstallEventService_CreateInstallEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstallEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallEventServiceServer).CreateInstallEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstallEventService_CreateInstallEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallEventServiceServer).CreateInstallEvent(ctx, req.(*CreateInstallEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstallEventService_CreateInstallEventBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstallEventBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallEventServiceServer).CreateInstallEventBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstallEventService_CreateInstallEventBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallEventServiceServer).CreateInstallEventBatch(ctx, req.(*CreateInstallEventBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstallEventService_ServiceDesc is the grpc.ServiceDesc for InstallEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstallEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.InstallEventService",
	HandlerType: (*InstallEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInstallEvent",
			Handler:    _InstallEventService_CreateInstallEvent_Handler,
		},
		{
			MethodName: "CreateInstallEventBatch",
			Handler:    _InstallEventService_CreateInstallEventBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "install_event.proto",
}
